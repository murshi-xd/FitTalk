name: Build and Deploy to Kubernetes

on:
  push:
    branches:
      "- deploy"

env:
  DOCKERHUB_USERNAME: murshii
  IMAGE_API: murshii/fittalk-api
  IMAGE_FRONTEND: murshii/fittalk-frontend
  IMAGE_MEDDYGPT: murshii/fittalk-meddygpt
  K8S_NAMESPACE: default

jobs:
  build-api:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ env.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
      
    - name: Build and Push API image
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        push: true
        tags: ${{ env.IMAGE_API }}:latest
        target: production
        cache-from: type=registry,ref=${{ env.IMAGE_API }}:cache
        cache-to: type=registry,ref=${{ env.IMAGE_API }}:cache,mode=max

  build-frontend:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ env.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Build and Push Frontend image
      uses: docker/build-push-action@v5
      with:
        context: ./frontend
        push: true
        tags: ${{ env.IMAGE_FRONTEND }}:latest
        target: production
        build-args: |
          VITE_API_URL=${{ secrets.VITE_API_URL }}
        cache-from: type=registry,ref=${{ env.IMAGE_FRONTEND }}:cache
        cache-to: type=registry,ref=${{ env.IMAGE_FRONTEND }}:cache,mode=max

  build-meddygpt:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ env.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
      
    - name: Build and Push MeddyGPT image
      uses: docker/build-push-action@v5
      with:
        context: ./meddy_gpt
        push: true
        tags: ${{ env.IMAGE_MEDDYGPT }}:latest
        target: production
        cache-from: type=registry,ref=${{ env.IMAGE_MEDDYGPT }}:cache
        cache-to: type=registry,ref=${{ env.IMAGE_MEDDYGPT }}:cache,mode=max

  deploy:
    needs: [build-api, build-frontend, build-meddygpt]
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: eu-west-2

    - name: Set up kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: latest

    - name: Set up Kubeconfig
      run: |
        echo "${{ secrets.KUBECONFIG }}" > kubeconfig
        export KUBECONFIG=$PWD/kubeconfig

    - name: Debug kubeconfig
      run: |
        export KUBECONFIG=$PWD/kubeconfig
        kubectl config current-context
        kubectl cluster-info

    - name: Wait for cert-manager to be healthy
      run: |
        export KUBECONFIG=$PWD/kubeconfig
        kubectl wait --namespace cert-manager --for=condition=Available deployment/cert-manager --timeout=120s
        kubectl wait --namespace cert-manager --for=condition=Available deployment/cert-manager-webhook --timeout=120s
        kubectl wait --namespace cert-manager --for=condition=Available deployment/cert-manager-cainjector --timeout=120s

    - name: Wait for nginx ingress controller to be healthy
      run: |
        export KUBECONFIG=$PWD/kubeconfig
        kubectl wait --namespace ingress-nginx --for=condition=Available deployment/ingress-nginx-controller --timeout=120s



    - name: Deploy Kubernetes Resources
      run: |
        export KUBECONFIG=$PWD/kubeconfig
        kubectl apply -f k8s/api/
        kubectl apply -f k8s/frontend/
        kubectl apply -f k8s/meddygpt/
        kubectl apply -f k8s/ingress/
        kubectl apply -f k8s/certificates/fittalk-tls-certificate.yaml
        kubectl apply -f k8s/certificates/issuer.yaml

    - name: Force rollout restart
      run: |
        export KUBECONFIG=$PWD/kubeconfig
        kubectl rollout restart deployment fittalk-api
        kubectl rollout restart deployment fittalk-frontend
        kubectl rollout restart deployment fittalk-meddygpt

    - name: Wait for rollout to complete
      run: |
        export KUBECONFIG=$PWD/kubeconfig
        kubectl rollout status deployment fittalk-api
        kubectl rollout status deployment fittalk-frontend
        kubectl rollout status deployment fittalk-meddygpt
