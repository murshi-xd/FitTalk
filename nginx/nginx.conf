events {}

http {
    include       mime.types;
    default_type  application/octet-stream;
    sendfile      on;

    upstream frontend {
        server frontend:80;
    }

    upstream api {
        server api:5002;
    }

    upstream meddygpt {
        server meddygpt:8080;
    }

    # Redirect all HTTP traffic to HTTPS
    server {
        listen 80;
        server_name auth.localhost api.auth.localhost meddygpt.auth.localhost;
        return 301 https://$host$request_uri;
    }

    # HTTPS - Frontend (WebSocket handling for HMR)
    server {
        listen 443 ssl;
        server_name auth.localhost;

        ssl_certificate     /etc/nginx/certs/selfsigned.crt;
        ssl_certificate_key /etc/nginx/certs/selfsigned.key;

        location / {
            proxy_pass http://frontend;
            proxy_http_version 1.1;

            # WebSocket headers for Vite HMR
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';

            # General headers
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_cache_bypass $http_upgrade;

        }

        # # WebSocket upgrade handling for HMR (Hot Module Reload)
        # location /ws {
        #     proxy_pass https://auth.frontend;  # Frontend server (Vite)
        #     proxy_http_version 1.1;
        #     proxy_set_header Upgrade $http_upgrade;
        #     proxy_set_header Connection 'upgrade';
        #     proxy_set_header Host $host;
        #     proxy_cache_bypass $http_upgrade;
        # }
    }

    # HTTPS - API
    server {
        listen 443 ssl;
        server_name api.auth.localhost;

        ssl_certificate     /etc/nginx/certs/selfsigned.crt;
        ssl_certificate_key /etc/nginx/certs/selfsigned.key;

        location / {
            proxy_pass http://api;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_cache_bypass $http_upgrade;
        }
    }

    # HTTPS - MeddyGPT
    server {
        listen 443 ssl;
        server_name meddygpt.auth.localhost;

        ssl_certificate     /etc/nginx/certs/selfsigned.crt;
        ssl_certificate_key /etc/nginx/certs/selfsigned.key;

        location / {
            proxy_pass http://meddygpt;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_cache_bypass $http_upgrade;
        }
    }
}


# events {}

# http {
#     include       mime.types;
#     default_type  application/octet-stream;
#     sendfile      on;

#     # Optional: Docker resolver (for internal DNS resolution)
#     resolver 127.0.0.11 valid=30s;

#     # Upstream blocks
#     upstream frontend {
#         server frontend:80;
#     }

#     upstream api {
#         server api:5002;
#     }

#     upstream meddygpt {
#         server meddygpt:8080;
#     }

#     # Common headers for proxying
#     map $http_upgrade $connection_upgrade {
#         default upgrade;
#         ''      close;
#     }

#     # Redirect HTTP to HTTPS
#     server {
#         listen 80;
#         server_name auth.localhost api.auth.localhost meddygpt.auth.localhost;
#         return 301 https://$host$request_uri;
#     }

#     # HTTPS - Frontend
#     server {
#         listen 443 ssl;
#         server_name auth.localhost;

#         ssl_certificate     /etc/nginx/certs/selfsigned.crt;
#         ssl_certificate_key /etc/nginx/certs/selfsigned.key;

#         location / {
#             proxy_pass http://frontend;
#             proxy_http_version 1.1;
#             proxy_set_header Upgrade $http_upgrade;
#             proxy_set_header Connection $connection_upgrade;
#             proxy_set_header Host $host;
#             proxy_set_header X-Real-IP $remote_addr;
#             proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
#             proxy_cache_bypass $http_upgrade;

#             # Security Headers
#             add_header X-Content-Type-Options nosniff;
#             add_header X-Frame-Options DENY;
#             add_header X-XSS-Protection "1; mode=block";
#             add_header Referrer-Policy no-referrer;
#         }

#         # WebSocket endpoint (e.g. Socket.IO)
#         location /socket.io/ {
#             proxy_pass http://frontend;
#             proxy_http_version 1.1;
#             proxy_set_header Upgrade $http_upgrade;
#             proxy_set_header Connection $connection_upgrade;
#             proxy_set_header Host $host;
#             proxy_set_header X-Real-IP $remote_addr;
#             proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
#             proxy_cache_bypass $http_upgrade;
#         }
#     }

#     # HTTPS - API
#     server {
#         listen 443 ssl;
#         server_name api.auth.localhost;

#         ssl_certificate     /etc/nginx/certs/selfsigned.crt;
#         ssl_certificate_key /etc/nginx/certs/selfsigned.key;

#         location / {
#             proxy_pass http://api;
#             proxy_http_version 1.1;
#             proxy_set_header Upgrade $http_upgrade;
#             proxy_set_header Connection $connection_upgrade;
#             proxy_set_header Host $host;
#             proxy_set_header X-Real-IP $remote_addr;
#             proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
#             proxy_cache_bypass $http_upgrade;

#             # Security Headers
#             add_header X-Content-Type-Options nosniff;
#             add_header X-Frame-Options DENY;
#             add_header X-XSS-Protection "1; mode=block";
#             add_header Referrer-Policy no-referrer;

#             # Optional: restrict to internal only
#             # allow 127.0.0.1;
#             # deny all;
#         }
#     }

#     # HTTPS - MeddyGPT
#     server {
#         listen 443 ssl;
#         server_name meddygpt.auth.localhost;

#         ssl_certificate     /etc/nginx/certs/selfsigned.crt;
#         ssl_certificate_key /etc/nginx/certs/selfsigned.key;

#         location / {
#             proxy_pass http://meddygpt;
#             proxy_http_version 1.1;
#             proxy_set_header Upgrade $http_upgrade;
#             proxy_set_header Connection $connection_upgrade;
#             proxy_set_header Host $host;
#             proxy_set_header X-Real-IP $remote_addr;
#             proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
#             proxy_cache_bypass $http_upgrade;

#             # Security Headers
#             add_header X-Content-Type-Options nosniff;
#             add_header X-Frame-Options DENY;
#             add_header X-XSS-Protection "1; mode=block";
#             add_header Referrer-Policy no-referrer;

#             # Handle long responses
#             proxy_read_timeout 300s;
#             proxy_send_timeout 300s;
#             client_max_body_size 20M;

#             # Optional: restrict to internal only
#             # allow 127.0.0.1;
#             # deny all;
#         }
#     }
# }
